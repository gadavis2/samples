# WARNING: THIS SOLUTION IS AN EXAMPLE ONLY AND IS NOT MEANT FOR PRODUCTION!

AWSTemplateFormatVersion: 2010-09-09
Transform: 'AWS::Serverless-2016-10-31'
Description: A CloudFront distribution with an S3 Bucket origin and API/Lambda origin to resize images.

# Global values that are applied to all applicable resources in this template
Globals:
  Function:
    CodeUri: ./src
    Runtime: nodejs14.x
    MemorySize: 1024
    Timeout: 25

Parameters:
  AppName:
    Description: Name of Application
    Type: String
    Default: cloudfront-resize-image

Resources:
  # API Gateway HTTP API
  HttpApi:
    Type: 'AWS::ApiGatewayV2::Api'
    Properties:
      Name: !Ref AppName
      Description: An Amazon API Gateway HTTP API and an AWS Lambda function.
      ProtocolType: HTTP
      CorsConfiguration:
        AllowOrigins: ['*']
        AllowMethods: [GET, HEAD, OPTIONS]
      Target: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${LambdaFunction}/invocations
  # Lambda Function - uses Globals to define additional configuration values
  LambdaFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      FunctionName: !Sub '${AppName}-function'
      Handler: app.handler
      Environment:
        Variables:
          S3BucketName: !Ref S3Bucket
      # AWS SAM Policy Templates: https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-policy-templates.html
      Policies:
        - S3ReadPolicy:
            BucketName: !Ref S3Bucket
  # Function permissions grant an AWS service or another account permission to use a function
  FunctionResourcePermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      Principal: apigateway.amazonaws.com
      FunctionName: !Ref LambdaFunction
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${HttpApi}/*'
  # S3 Bucket
  S3Bucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      VersioningConfiguration:
        Status: Enabled
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders: ['*']
            AllowedMethods: [GET]
            AllowedOrigins: ['*']
            MaxAge: 3000
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
  PrivateBucketPolicy:
    Type: 'AWS::S3::BucketPolicy'
    Properties:
      PolicyDocument:
        Id: BucketPolicy
        Version: 2012-10-17
        Statement:
          - Sid: AllowOAIGetBucketObjects
            Effect: Allow
            Principal:
              CanonicalUser: !GetAtt OriginAccessIdentity.S3CanonicalUserId
            Action: 's3:GetObject'
            Resource: !Sub 
              - '${varS3Bucket}/*'
              - varS3Bucket: !GetAtt S3Bucket.Arn
      Bucket: !Ref S3Bucket
  # CloudFront with Origin Group
  OriginAccessIdentity:
    Type: 'AWS::CloudFront::CloudFrontOriginAccessIdentity'
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: CloudFrontOAI
  CloudFrontDistribution:
    Type: 'AWS::CloudFront::Distribution'
    Properties:
      DistributionConfig:
        Comment: CloudFrontDistribution
        Enabled: true
        PriceClass: PriceClass_100
        OriginGroups:
          Quantity: 1
          Items:
            - Id: OriginGroup
              FailoverCriteria:
                StatusCodes:
                  Quantity: 2
                  Items: [403, 404]
              Members:
                Quantity: 2
                Items:
                  - OriginId: S3Origin #Primary
                  - OriginId: ApiOrigin #Secondary
        # The S3 bucket primary origin has a connection timeout of 3 seconds and 1 connection attempt
        Origins:
          - DomainName: !GetAtt S3Bucket.DomainName
            Id: S3Origin
            ConnectionAttempts: 1
            ConnectionTimeout: 3
            S3OriginConfig:
              OriginAccessIdentity: !Sub 
                - 'origin-access-identity/cloudfront/${varOAI}'
                - varOAI: !Ref OriginAccessIdentity
          - DomainName: !Sub '${HttpApi}.execute-api.${AWS::Region}.amazonaws.com'
            Id: ApiOrigin
            #OriginPath: /stage-name
            CustomOriginConfig:
              OriginProtocolPolicy: https-only
              OriginSSLProtocols:
                - TLSv1.2
        DefaultCacheBehavior:
          AllowedMethods: [GET, HEAD, OPTIONS]
          TargetOriginId: OriginGroup
          ViewerProtocolPolicy: redirect-to-https
          Compress: true
          ForwardedValues:
            QueryString: true
          DefaultTTL: 86400
          MaxTTL: 31536000
          MinTTL: 86400
        DefaultRootObject: index.html
        ViewerCertificate:
          CloudFrontDefaultCertificate: true
        HttpVersion: http2

Outputs:
  S3BucketName:
    Description: S3 Bucket Name
    Value: !Ref S3Bucket
  CloudFrontSecureUrl:
    Description: CloudFront Secure Url
    Value: !Sub 
      - 'https://${varCFDomain}'
      - varCFDomain: !GetAtt CloudFrontDistribution.DomainName